const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');
const moment = require('moment-timezone');
require('dotenv').config();

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, {polling: true});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Calendar
const GOOGLE_CREDENTIALS = process.env.GOOGLE_CREDENTIALS; // JSON —Å—Ç—Ä–æ–∫–∞ —Å credentials
const CALENDAR_ID = process.env.CALENDAR_ID || 'primary'; // ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è
const TIMEZONE = 'Europe/Warsaw'; // Timezone –¥–ª—è –ü–æ–ª—å—à–∏

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Calendar API
let calendar = null;

function initializeGoogleCalendar() {
    try {
        if (GOOGLE_CREDENTIALS) {
            const credentials = JSON.parse(GOOGLE_CREDENTIALS);
            const auth = new google.auth.GoogleAuth({
                credentials: credentials,
                scopes: ['https://www.googleapis.com/auth/calendar']
            });
            calendar = google.calendar({ version: 'v3', auth });
            console.log('‚úÖ Google Calendar API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.log('‚ö†Ô∏è Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Calendar:', error.message);
    }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
let userSessions = {};
let localSchedule = {}; // Fallback –µ—Å–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
let bookings = {};

// –¢–∏–ø—ã —É—Ä–æ–∫–æ–≤
const lessonTypes = {
    'beginner': {
        name: 'üü¢ PoczƒÖtkujƒÖcy (A1-A2)',
        description: 'Lekcje dla poczƒÖtkujƒÖcych - podstawy jƒôzyka polskiego',
        price: '60 z≈Ç',
        duration: 60 // –≤ –º–∏–Ω—É—Ç–∞—Ö
    },
    'intermediate': {
        name: 'üü° ≈öredniozaawansowany (B1-B2)',
        description: 'Lekcje dla ≈õrednio zaawansowanych - rozw√≥j umiejƒôtno≈õci',
        price: '70 z≈Ç',
        duration: 60
    },
    'advanced': {
        name: 'üî¥ Zaawansowany (C1-C2)',
        description: 'Lekcje dla zaawansowanych - perfekcyjny polski',
        price: '80 z≈Ç',
        duration: 60
    },
    'conversation': {
        name: 'üí¨ Konwersacje',
        description: 'Praktyka m√≥wienia i rozmowy codzienne',
        price: '65 z≈Ç',
        duration: 60
    },
    'business': {
        name: 'üíº Polski biznesowy',
        description: 'Jƒôzyk polski w biznesie i pracy',
        price: '85 z≈Ç',
        duration: 60
    },
    'exam': {
        name: 'üìù Przygotowanie do egzamin√≥w',
        description: 'Przygotowanie do certyfikat√≥w z jƒôzyka polskiego',
        price: '90 z≈Ç',
        duration: 90
    }
};

// –†–∞–±–æ—á–∏–µ —á–∞—Å—ã —É—á–∏—Ç–µ–ª—è
const WORKING_HOURS = {
    start: 9, // 9:00
    end: 20,  // 20:00
    slotDuration: 90, // 90 –º–∏–Ω—É—Ç –Ω–∞ —Å–ª–æ—Ç (60 –º–∏–Ω —É—Ä–æ–∫ + 30 –º–∏–Ω –ø–µ—Ä–µ—Ä—ã–≤)
    workingDays: [1, 2, 3, 4, 5, 6] // –ü–Ω-–°–± (0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function getAvailableTimeSlots() {
    const slots = [];
    const now = moment().tz(TIMEZONE);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 14 –¥–Ω–µ–π
    for (let day = 0; day < 14; day++) {
        const currentDate = moment(now).add(day, 'days');
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏
        if (!WORKING_HOURS.workingDays.includes(currentDate.day())) {
            continue;
        }
        
        // –î–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
        const startHour = day === 0 ? Math.max(WORKING_HOURS.start, now.hour() + 2) : WORKING_HOURS.start;
        
        for (let hour = startHour; hour < WORKING_HOURS.end; hour += 1.5) {
            const slotTime = moment(currentDate).hour(Math.floor(hour)).minute((hour % 1) * 60).second(0);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
            const isAvailable = await isSlotAvailable(slotTime);
            
            if (isAvailable) {
                slots.push({
                    text: slotTime.format('DD.MM (ddd) HH:mm'),
                    callback_data: `time_${slotTime.format('YYYY-MM-DD_HH:mm')}`
                });
            }
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö —Å–ª–æ—Ç–æ–≤
            if (slots.length >= 20) break;
        }
        
        if (slots.length >= 20) break;
    }
    
    return slots;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞
async function isSlotAvailable(slotTime) {
    // –ï—Å–ª–∏ Google Calendar –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –Ω–µ–º
    if (calendar) {
        try {
            const startTime = slotTime.toISOString();
            const endTime = slotTime.clone().add(WORKING_HOURS.slotDuration, 'minutes').toISOString();
            
            const response = await calendar.events.list({
                calendarId: CALENDAR_ID,
                timeMin: startTime,
                timeMax: endTime,
                singleEvents: true,
                orderBy: 'startTime',
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è, —Å–ª–æ—Ç –∑–∞–Ω—è—Ç
            return response.data.items.length === 0;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error.message);
            // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        }
    }
    
    // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (fallback)
    const slotKey = slotTime.format('YYYY-MM-DD_HH:mm');
    return !localSchedule[slotKey];
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar
async function createCalendarEvent(slotTime, lessonType, userInfo) {
    if (!calendar) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –µ—Å–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        const slotKey = slotTime.format('YYYY-MM-DD_HH:mm');
        localSchedule[slotKey] = {
            lessonType,
            userInfo,
            createdAt: new Date()
        };
        return { success: true, eventId: slotKey };
    }
    
    try {
        const lesson = lessonTypes[lessonType];
        const startTime = slotTime.toISOString();
        const endTime = slotTime.clone().add(lesson.duration, 'minutes').toISOString();
        
        const event = {
            summary: `Lekcja: ${lesson.name}`,
            description: `
Typ lekcji: ${lesson.name}
Cena: ${lesson.price}
Student: ${userInfo.email}
Telefon: ${userInfo.phone}
Telegram ID: ${userInfo.userId}

${lesson.description}
            `.trim(),
            start: {
                dateTime: startTime,
                timeZone: TIMEZONE,
            },
            end: {
                dateTime: endTime,
                timeZone: TIMEZONE,
            },
            attendees: [
                { email: userInfo.email }
            ],
            reminders: {
                useDefault: false,
                overrides: [
                    { method: 'email', minutes: 24 * 60 }, // –ó–∞ 24 —á–∞—Å–∞
                    { method: 'email', minutes: 60 },      // –ó–∞ —á–∞—Å
                ],
            },
        };
        
        const response = await calendar.events.insert({
            calendarId: CALENDAR_ID,
            resource: event,
        });
        
        return { success: true, eventId: response.data.id };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error.message);
        // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        const slotKey = slotTime.format('YYYY-MM-DD_HH:mm');
        localSchedule[slotKey] = { lessonType, userInfo, createdAt: new Date() };
        return { success: true, eventId: slotKey };
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function isValidPhone(phone) {
    const phoneRegex = /^[\+]?[1-9][\d]{8,14}$/;
    return phoneRegex.test(phone.replace(/[\s\-\(\)]/g, ''));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
initializeGoogleCalendar();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.first_name || msg.from.username;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userSessions[userId] = {
        step: 'start',
        lessonType: null,
        timeSlot: null,
        email: null,
        phone: null
    };

    const welcomeMessage = `
üáµüá± *Witaj ${userName}!*

Jestem Anna Kowalska, certyfikowany nauczyciel jƒôzyka polskiego! üë©‚Äçüè´

üìö *Oferujƒô profesjonalne lekcje online:*
‚Ä¢ Indywidualne podej≈õcie do ka≈ºdego ucznia
‚Ä¢ Materia≈Çy dostosowane do poziomu
‚Ä¢ Lekcje przez Zoom w wysokiej jako≈õci
‚Ä¢ Elastyczne godziny zajƒôƒá

üéØ *Moje specjalizacje:*
‚Ä¢ Przygotowanie do egzamin√≥w certyfikatowych
‚Ä¢ Polski dla biznesu i pracy
‚Ä¢ Konwersacje i wymowa
‚Ä¢ Gramatyka od podstaw

üí∞ *Ceny: 60-90 z≈Ç za lekcjƒô*
‚è∞ *Czas trwania: 60-90 minut*

üìÖ *Automatyczna synchronizacja z kalendarzem Google*

Aby um√≥wiƒá lekcjƒô, kliknij przycisk poni≈ºej! üëá
`;

    const keyboard = {
        inline_keyboard: [
            [{ text: 'üìÖ Um√≥w lekcjƒô', callback_data: 'book_lesson' }],
            [{ text: 'üìã Moje rezerwacje', callback_data: 'my_bookings' }],
            [{ text: '‚ÑπÔ∏è Informacje', callback_data: 'info' }],
            [{ text: 'üìû Kontakt', callback_data: 'contact' }]
        ]
    };

    bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
    if (!userSessions[userId]) {
        userSessions[userId] = {
            step: 'start',
            lessonType: null,
            timeSlot: null,
            email: null,
            phone: null
        };
    }

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    bot.answerCallbackQuery(callbackQuery.id);

    if (data === 'book_lesson') {
        await showLessonTypes(chatId, messageId, userId);
    } else if (data.startsWith('lesson_')) {
        const lessonType = data.replace('lesson_', '');
        userSessions[userId].lessonType = lessonType;
        userSessions[userId].step = 'time_selection';
        await showTimeSlots(chatId, messageId, userId);
    } else if (data.startsWith('time_')) {
        const timeSlotId = data.replace('time_', '');
        userSessions[userId].timeSlot = timeSlotId;
        userSessions[userId].step = 'contact_info';
        await askForContactInfo(chatId, messageId, userId);
    } else if (data === 'confirm_booking') {
        await confirmBooking(chatId, messageId, userId);
    } else if (data === 'cancel_booking') {
        await cancelCurrentBooking(chatId, messageId, userId);
    } else if (data === 'my_bookings') {
        await showUserBookings(chatId, messageId, userId);
    } else if (data === 'info') {
        await showInfo(chatId, messageId);
    } else if (data === 'contact') {
        await showContact(chatId, messageId);
    } else if (data === 'back_to_main') {
        bot.editMessageText('Wybierz opcjƒô:', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìÖ Um√≥w lekcjƒô', callback_data: 'book_lesson' }],
                    [{ text: 'üìã Moje rezerwacje', callback_data: 'my_bookings' }],
                    [{ text: '‚ÑπÔ∏è Informacje', callback_data: 'info' }],
                    [{ text: 'üìû Kontakt', callback_data: 'contact' }]
                ]
            }
        });
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∏–ø—ã —É—Ä–æ–∫–æ–≤
async function showLessonTypes(chatId, messageId, userId) {
    const keyboard = [];
    
    Object.keys(lessonTypes).forEach(key => {
        keyboard.push([{
            text: lessonTypes[key].name,
            callback_data: `lesson_${key}`
        }]);
    });
    
    keyboard.push([{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'back_to_main' }]);

    const message = `
üìö *Wybierz rodzaj lekcji:*

${Object.keys(lessonTypes).map(key => {
    const lesson = lessonTypes[key];
    return `${lesson.name}\nüí∞ ${lesson.price} | ‚è∞ ${lesson.duration} min\n${lesson.description}\n`;
}).join('\n')}
`;

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function showTimeSlots(chatId, messageId, userId) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    bot.editMessageText('üîÑ Sprawdzam dostƒôpne terminy...', {
        chat_id: chatId,
        message_id: messageId
    });
    
    const availableSlots = await getAvailableTimeSlots();
    
    if (availableSlots.length === 0) {
        bot.editMessageText(
            'üòî Przepraszam, wszystkie terminy na najbli≈ºsze 2 tygodnie sƒÖ zajƒôte.\n\nüìß Skontaktuj siƒô ze mnƒÖ bezpo≈õrednio: anna.kowalska@email.com\nüì± WhatsApp: +48 123 456 789',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'book_lesson' }]
                    ]
                }
            }
        );
        return;
    }

    const keyboard = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã –ø–æ 2 –≤ —Ä—è–¥
    for (let i = 0; i < availableSlots.length; i += 2) {
        const row = [availableSlots[i]];
        if (i + 1 < availableSlots.length) {
            row.push(availableSlots[i + 1]);
        }
        keyboard.push(row);
    }
    
    keyboard.push([{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'book_lesson' }]);

    const selectedLesson = lessonTypes[userSessions[userId].lessonType];
    const message = `
üìÖ *Dostƒôpne terminy dla: ${selectedLesson.name}*

üí∞ Cena: ${selectedLesson.price}
‚è∞ Czas trwania: ${selectedLesson.duration} minut

üóìÔ∏è *Dostƒôpne terminy na najbli≈ºsze 2 tygodnie:*
Wybierz dogodny dla Ciebie termin:
`;

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    });
}

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
async function askForContactInfo(chatId, messageId, userId) {
    const session = userSessions[userId];
    const selectedLesson = lessonTypes[session.lessonType];
    const slotTime = moment(session.timeSlot, 'YYYY-MM-DD_HH:mm').tz(TIMEZONE);

    const message = `
‚úÖ *Wybrano:*
üìö ${selectedLesson.name}
üìÖ ${slotTime.format('DD.MM.YYYY (dddd) HH:mm')}
üí∞ ${selectedLesson.price}
‚è∞ Czas trwania: ${selectedLesson.duration} minut

üìß *Podaj sw√≥j email dla potwierdzenia:*
(Wy≈õlij wiadomo≈õƒá z adresem email)
`;

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è Zmie≈Ñ termin', callback_data: 'book_lesson' }]
            ]
        }
    });

    userSessions[userId].step = 'waiting_email';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith('/')) return;

    if (!userSessions[userId]) return;

    const session = userSessions[userId];

    if (session.step === 'waiting_email') {
        if (isValidEmail(text)) {
            session.email = text;
            session.step = 'waiting_phone';
            
            bot.sendMessage(chatId, `
‚úÖ Email zapisany: ${text}

üì± *Teraz podaj numer telefonu:*
(np. +48 123 456 789 lub 123456789)
`, { parse_mode: 'Markdown' });
        } else {
            bot.sendMessage(chatId, '‚ùå Podaj prawid≈Çowy adres email (np. nazwa@domena.pl)');
        }
    } else if (session.step === 'waiting_phone') {
        if (isValidPhone(text)) {
            session.phone = text;
            session.step = 'confirmation';
            showBookingConfirmation(chatId, userId);
        } else {
            bot.sendMessage(chatId, '‚ùå Podaj prawid≈Çowy numer telefonu (np. +48 123 456 789)');
        }
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function showBookingConfirmation(chatId, userId) {
    const session = userSessions[userId];
    const selectedLesson = lessonTypes[session.lessonType];
    const slotTime = moment(session.timeSlot, 'YYYY-MM-DD_HH:mm').tz(TIMEZONE);

    const message = `
üìã *Potwierdzenie rezerwacji:*

üë§ **Dane kontaktowe:**
üìß Email: ${session.email}
üì± Telefon: ${session.phone}

üìö **Lekcja:**
${selectedLesson.name}
${selectedLesson.description}

üìÖ **Termin:**
${slotTime.format('DD.MM.YYYY (dddd)')}
üïê ${slotTime.format('HH:mm')} - ${slotTime.clone().add(selectedLesson.duration, 'minutes').format('HH:mm')}
‚è∞ Czas trwania: ${selectedLesson.duration} minut

üí∞ **Koszt:** ${selectedLesson.price}

üîó **Link do Zoom zostanie przes≈Çany na email przed lekcjƒÖ**
üìÖ **Wydarzenie zostanie dodane do kalendarza Google**

Czy potwierdzasz rezerwacjƒô?
`;

    const keyboard = {
        inline_keyboard: [
            [
                { text: '‚úÖ Potwierd≈∫', callback_data: 'confirm_booking' },
                { text: '‚ùå Anuluj', callback_data: 'cancel_booking' }
            ]
        ]
    };

    bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
    });
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
async function confirmBooking(chatId, messageId, userId) {
    const session = userSessions[userId];
    const selectedLesson = lessonTypes[session.lessonType];
    const slotTime = moment(session.timeSlot, 'YYYY-MM-DD_HH:mm').tz(TIMEZONE);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    bot.editMessageText('üîÑ Przetwarzam rezerwacjƒô...', {
        chat_id: chatId,
        message_id: messageId
    });
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        const result = await createCalendarEvent(slotTime, session.lessonType, {
            userId: userId,
            email: session.email,
            phone: session.phone,
            name: session.email.split('@')[0] // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å email –∫–∞–∫ –∏–º—è
        });
        
        if (result.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if (!bookings[userId]) {
                bookings[userId] = [];
            }
            
            bookings[userId].push({
                id: result.eventId,
                lessonType: session.lessonType,
                dateTime: session.timeSlot,
                email: session.email,
                phone: session.phone,
                bookedAt: new Date(),
                status: 'confirmed'
            });

            bot.editMessageText(`
üéâ *Rezerwacja potwierdzona!*

üìÖ **${slotTime.format('DD.MM.YYYY (dddd) HH:mm')}**
üìö **${selectedLesson.name}**
üí∞ **${selectedLesson.price}**

üìß **Szczeg√≥≈Çy wys≈Çane na:** ${session.email}
üìÖ **Dodano do kalendarza Google**

üìù **Co dalej:**
‚Ä¢ Za 24h przed lekcjƒÖ wy≈õlƒô link do Zoom
‚Ä¢ Przygotuj materia≈Çy do nauki
‚Ä¢ W razie pyta≈Ñ pisz: anna.kowalska@email.com

Do zobaczenia na lekcji! üáµüá±
`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üè† Menu g≈Ç√≥wne', callback_data: 'back_to_main' }]
                    ]
                }
            });

            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            delete userSessions[userId];
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        bot.editMessageText('‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas rezerwacji. Spr√≥buj ponownie lub skontaktuj siƒô bezpo≈õrednio.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ Spr√≥buj ponownie', callback_data: 'book_lesson' }],
                    [{ text: 'üè† Menu g≈Ç√≥wne', callback_data: 'back_to_main' }]
                ]
            }
        });
    }
}

// –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
async function cancelCurrentBooking(chatId, messageId, userId) {
    delete userSessions[userId];
    
    bot.editMessageText('‚ùå Rezerwacja anulowana.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üè† Menu g≈Ç√≥wne', callback_data: 'back_to_main' }]
            ]
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserBookings(chatId, messageId, userId) {
    const userBookingsList = bookings[userId] || [];
    
    if (userBookingsList.length === 0) {
        bot.editMessageText('üìù Nie masz ≈ºadnych rezerwacji.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìÖ Um√≥w lekcjƒô', callback_data: 'book_lesson' }],
                    [{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'back_to_main' }]
                ]
            }
        });
        return;
    }

    let message = 'üìã *Twoje rezerwacje:*\n\n';
    
    userBookingsList.forEach((booking, index) => {
        const lesson = lessonTypes[booking.lessonType];
        const bookingTime = moment(booking.dateTime, 'YYYY-MM-DD_HH:mm').tz(TIMEZONE);
        
        message += `${index + 1}. **${bookingTime.format('DD.MM.YYYY (dddd) HH:mm')}**\n`;
        message += `üìö ${lesson.name}\n`;
        message += `üí∞ ${lesson.price}\n`;
        message += `üìß ${booking.email}\n`;
        message += `üì± ${booking.phone}\n\n`;
    });

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üìÖ Um√≥w nowƒÖ lekcjƒô', callback_data: 'book_lesson' }],
                [{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'back_to_main' }]
            ]
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
async function showInfo(chatId, messageId) {
    const calendarStatus = calendar ? '‚úÖ Po≈ÇƒÖczony z Google Calendar' : '‚ö†Ô∏è Lokalne zarzƒÖdzanie terminami';
    
    const message = `
‚ÑπÔ∏è **Informacje o lekcjach:**

üë©‚Äçüè´ **Anna Kowalska**
‚Ä¢ Certyfikowany nauczyciel jƒôzyka polskiego
‚Ä¢ 8 lat do≈õwiadczenia w nauczaniu online
‚Ä¢ Specjalizacja: egzaminy, biznes, konwersacje

üìö **Poziomy nauczania:**
‚Ä¢ A1-A2 (PoczƒÖtkujƒÖcy)
‚Ä¢ B1-B2 (≈öredniozaawansowany) 
‚Ä¢ C1-C2 (Zaawansowany)

üéØ **Metody nauczania:**
‚Ä¢ Komunikatywna metoda nauki
‚Ä¢ Materia≈Çy multimedialne
‚Ä¢ ƒÜwiczenia praktyczne
‚Ä¢ Symulacje sytuacji rzeczywistych

‚è∞ **Godziny pracy:**
Pon-Sob: 9:00-20:00

üîó **Platforma:** Zoom
üì± **Wsparcie:** WhatsApp, Email
üìÖ **System:** ${calendarStatus}
`;

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'back_to_main' }]
            ]
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
async function showContact(chatId, messageId) {
    const message = `
üìû **Kontakt:**

üë©‚Äçüè´ **Anna Kowalska**
üìß Email: anna.kowalska@email.com
üì± WhatsApp: +48 123 456 789
üåê Website: www.polskionline.pl

üìç **Adres (lekcje stacjonarne):**
ul. Nowy ≈öwiat 15/3
00-497 Warszawa

‚è∞ **Godziny kontaktu:**
Pon-Pt: 8:00-21:00
Sob: 9:00-18:00
Niedz: 10:00-16:00

üí¨ **Jƒôzyki obs≈Çugi:**
üáµüá± Polski
üá¨üáß English  
üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
üá∑üá∫ –†—É—Å—Å–∫–∏–π

üìÖ **Automatyczne zarzƒÖdzanie kalendarzem**
üîÑ **Synchronizacja z Google Calendar**
`;

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'back_to_main' }]
            ]
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.log('Polling error:', error);
});

bot.on('error', (error) => {
    console.log('Bot error:', error);
});

console.log('üáµüá± Polish Teacher Bot (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) –∑–∞–ø—É—â–µ–Ω...');
console.log('üìÖ Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:', calendar ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)');
