const TelegramBot = require('node-telegram-bot-api');

// Define a local helper function for MarkdownV2 escaping
function escapeMarkdownV2(text) {
    if (typeof text !== 'string') {
        return '';
    }
    // Escape characters that have special meaning in MarkdownV2
    // List of special characters: _, *, [, ], (, ), ~, `, >, #, +, -, =, |, {, }, ., !
    return text.replace(/[_*\[\]()~`>#+\-=|{}.!]/g, '\\const TelegramBot = require('node-telegram-bot-api');');
}


const { google } = require('googleapis');
const moment = require('moment-timezone');
const http = require('http'); // Using built-in http for the server
const nodemailer = require('nodemailer'); // For sending emails
require('dotenv').config();

const token = process.env.BOT_TOKEN;
const port = process.env.PORT || 3000;
const url = process.env.RENDER_EXTERNAL_URL; // The public URL of the Render service

// Email configuration
const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;
const EMAIL_SERVICE = process.env.EMAIL_SERVICE;
const TEACHER_EMAIL = process.env.TEACHER_EMAIL || 'anna.kowalska@email.com';

let transporter;
if (EMAIL_USER && EMAIL_PASS) {
    transporter = nodemailer.createTransport({
        service: EMAIL_SERVICE,
        auth: {
            user: EMAIL_USER,
            pass: EMAIL_PASS,
        },
    });
    console.log('‚úÖ Nodemailer —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} else {
    console.log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤–∫–∞ Email –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
}

let bot;

if (!token) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
    process.exit(1);
}

// –ï—Å–ª–∏ URL –¥–æ—Å—Ç—É–ø–µ–Ω (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω –Ω–∞ Render), –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫–∏
if (url) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Webhook...');
    bot = new TelegramBot(token);
    bot.setWebHook(`${url}/bot${token}`);
    console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${url}/bot${token}`);

    // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
    const server = http.createServer((req, res) => {
        if (req.method === 'POST' && req.url === `/bot${token}`) {
            let body = '';
            req.on('data', (chunk) => {
                body += chunk.toString();
            });
            req.on('end', () => {
                try {
                    const update = JSON.parse(body);
                    bot.processUpdate(update);
                    res.writeHead(200);
                    res.end();
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                    res.writeHead(500);
                    res.end();
                }
            });
        } else {
            // Health check endpoint
            res.writeHead(200, { 'Content-Type': 'text/plain' });
            res.end('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞!');
        }
    });

    server.listen(port, '0.0.0.0', () => {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    });

} else {
    // –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log('üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');
    bot = new TelegramBot(token, { polling: true });
}


// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Calendar –∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É—á–∏—Ç–µ–ª—è
const GOOGLE_CREDENTIALS = process.env.GOOGLE_CREDENTIALS;
const CALENDAR_ID = process.env.CALENDAR_ID || 'primary';
const TIMEZONE = process.env.TEACHER_TIMEZONE || 'Europe/Warsaw';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É—á–∏—Ç–µ–ª—è
const TEACHER_CONFIG = {
    workingHours: {
        start: parseInt(process.env.TEACHER_WORKING_HOURS_START) || 9,
        end: parseInt(process.env.TEACHER_WORKING_HOURS_END) || 20
    },
    lessonDuration: parseInt(process.env.LESSON_DURATION_MINUTES) || 60,
    breakBetweenLessons: parseInt(process.env.BREAK_BETWEEN_LESSONS_MINUTES) || 30,
    advanceBookingHours: parseInt(process.env.ADVANCE_BOOKING_HOURS) || 24,
    maxBookingDaysAhead: parseInt(process.env.MAX_BOOKING_DAYS_AHEAD) || 14,
    workingDays: (process.env.WORKING_DAYS || '1,2,3,4,5,6').split(',').map(d => parseInt(d))
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Calendar API
let calendar = null;

function initializeGoogleCalendar() {
    try {
        if (GOOGLE_CREDENTIALS) {
            const credentials = JSON.parse(GOOGLE_CREDENTIALS);
            const auth = new google.auth.GoogleAuth({
                credentials: credentials,
                scopes: ['https://www.googleapis.com/auth/calendar']
            });
            calendar = google.calendar({ version: 'v3', auth });
            console.log('‚úÖ Google Calendar API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            console.log(`üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: ${CALENDAR_ID}`);
            console.log(`üïê –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: ${TEACHER_CONFIG.workingHours.start}:00-${TEACHER_CONFIG.workingHours.end}:00`);
        } else {
            console.log('‚ö†Ô∏è Google Calendar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Calendar:', error.message);
    }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
let userSessions = {};
let localSchedule = {};
let bookings = {};
let userProfiles = {}; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// –¢–∏–ø—ã —É—Ä–æ–∫–æ–≤
const lessonTypes = {
    'beginner': {
        name: 'üü¢ PoczƒÖtkujƒÖcy (A1-A2)',
        description: 'Lekcje dla poczƒÖtkujƒÖcych - podstawy jƒôzyka polskiego',
        price: '60 z≈Ç',
        duration: 60
    },
    'intermediate': {
        name: 'üü° ≈öredniozaawansowany (B1-B2)',
        description: 'Lekcje dla ≈õrednio zaawansowanych - rozw√≥j umiejƒôtno≈õci',
        price: '70 z≈Ç',
        duration: 60
    },
    'advanced': {
        name: 'üî¥ Zaawansowany (C1-C2)',
        description: 'Lekcje dla zaawansowanych - perfekcyjny polski',
        price: '80 z≈Ç',
        duration: 60
    },
    'conversation': {
        name: 'üí¨ Konwersacje',
        description: 'Praktyka m√≥wienia i rozmowy codzienne',
        price: '65 z≈Ç',
        duration: 60
    },
    'business': {
        name: 'üíº Polski biznesowy',
        description: 'Jƒôzyk polski w biznesie i pracy',
        price: '85 z≈Ç',
        duration: 60
    },
    'exam': {
        name: 'üìù Przygotowanie do egzamin√≥w',
        description: 'Przygotowanie do certyfikat√≥w z jƒôzyka polskiego',
        price: '90 z≈Ç',
        duration: 90
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —É—á–∏—Ç–µ–ª—è
async function getTeacherCalendarEvents(startDate, endDate) {
    if (!calendar) {
        return []; // Fallback - –ø—É—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    }
    
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å ${startDate.format()} –¥–æ ${endDate.format()}`);
        
        const response = await calendar.events.list({
            calendarId: CALENDAR_ID,
            timeMin: startDate.toISOString(),
            timeMax: endDate.toISOString(),
            singleEvents: true,
            orderBy: 'startTime',
        });
        
        const events = response.data.items || [];
        console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: ${events.length}`);
        
        return events.map(event => ({
            id: event.id,
            summary: event.summary || '–ó–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è',
            start: moment(event.start.dateTime || event.start.date).tz(TIMEZONE),
            end: moment(event.end.dateTime || event.end.date).tz(TIMEZONE),
            isAllDay: !event.start.dateTime
        }));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error.message);
        return [];
    }
}

// –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
async function findAvailableSlots() {
    const now = moment().tz(TIMEZONE);
    const startDate = now.clone().add(TEACHER_CONFIG.advanceBookingHours, 'hours');
    const endDate = now.clone().add(TEACHER_CONFIG.maxBookingDaysAhead, 'days');
    
    console.log(`üîç –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã —Å ${startDate.format('DD.MM.YYYY HH:mm')} –¥–æ ${endDate.format('DD.MM.YYYY HH:mm')}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const events = await getTeacherCalendarEvents(startDate, endDate);
    
    const availableSlots = [];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
    for (let day = startDate.clone(); day.isBefore(endDate); day.add(1, 'day')) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
        if (!TEACHER_CONFIG.workingDays.includes(day.day())) {
            continue;
        }
        
        // –°–æ–±—ã—Ç–∏—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
        const dayEvents = events.filter(event => 
            event.start.format('YYYY-MM-DD') === day.format('YYYY-MM-DD') && !event.isAllDay
        ).sort((a, b) => a.start.valueOf() - b.start.valueOf());
        
        // –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        const dayStart = day.clone().hour(TEACHER_CONFIG.workingHours.start).minute(0).second(0);
        const dayEnd = day.clone().hour(TEACHER_CONFIG.workingHours.end).minute(0).second(0);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–µ —Ä–∞–Ω—å—à–µ startDate
        const actualStart = day.isSame(startDate, 'day') ? 
            moment.max(dayStart, startDate) : dayStart;
        
        // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
        let currentTime = actualStart.clone();
        
        for (const event of dayEvents) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ —Å–æ–±—ã—Ç–∏—è
            const freeSlots = findSlotsBetween(currentTime, event.start);
            availableSlots.push(...freeSlots);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω—Ü—É —Å–æ–±—ã—Ç–∏—è + –ø–µ—Ä–µ—Ä—ã–≤
            currentTime = event.end.clone().add(TEACHER_CONFIG.breakBetweenLessons, 'minutes');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        const freeSlots = findSlotsBetween(currentTime, dayEnd);
        availableSlots.push(...freeSlots);
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: ${availableSlots.length}`);
    return availableSlots.slice(0, 24); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
}

// –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
function findSlotsBetween(startTime, endTime) {
    const slots = [];
    const slotDuration = TEACHER_CONFIG.lessonDuration + TEACHER_CONFIG.breakBetweenLessons;
    
    let currentSlot = startTime.clone();
    
    while (currentSlot.clone().add(TEACHER_CONFIG.lessonDuration, 'minutes').isSameOrBefore(endTime)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö
        const slotEnd = currentSlot.clone().add(TEACHER_CONFIG.lessonDuration, 'minutes');
        
        if (currentSlot.hour() >= TEACHER_CONFIG.workingHours.start && 
            slotEnd.hour() <= TEACHER_CONFIG.workingHours.end) {
            
            slots.push({
                start: currentSlot.clone(),
                end: slotEnd,
                text: currentSlot.format('DD.MM (ddd) HH:mm'),
                callback_data: `time_${currentSlot.format('YYYY-MM-DD_HH:mm')}`
            });
        }
        
        currentSlot.add(slotDuration, 'minutes');
    }
    
    return slots;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
async function createCalendarEvent(slotTime, lessonType, userInfo) {
    const lesson = lessonTypes[lessonType];
    const startTime = slotTime.clone();
    const endTime = startTime.clone().add(lesson.duration, 'minutes');
    
    if (!calendar) {
        // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        const slotKey = slotTime.format('YYYY-MM-DD_HH:mm');
        localSchedule[slotKey] = { lessonType, userInfo, createdAt: new Date() };
        return { success: true, eventId: slotKey };
    }
    
    try {
        const event = {
            summary: `${lesson.name} - ${userInfo.name}`,
            description: `
üìö Typ lekcji: ${lesson.name}
üí∞ Cena: ${lesson.price}
‚è∞ Czas trwania: ${lesson.duration} minut

üë§ Student:
üìù Imiƒô: ${userInfo.name}
üìß Email: ${userInfo.email}
üì± Telefon: ${userInfo.phone}
üÜî Telegram: ${userInfo.userId}

üìù Opis: ${lesson.description}

ü§ñ Utworzone przez: Polish Teacher Bot
            `.trim(),
            start: {
                dateTime: startTime.toISOString(),
                timeZone: TIMEZONE,
            },
            end: {
                dateTime: endTime.toISOString(),
                timeZone: TIMEZONE,
            },
            
            reminders: {
                useDefault: false,
                overrides: [
                    { method: 'email', minutes: 24 * 60 },
                    { method: 'email', minutes: 60 },
                    { method: 'popup', minutes: 30 }
                ],
            },
            colorId: '2', // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–∫–æ–≤
        };
        
        console.log(`üìÖ –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ: ${event.summary} –Ω–∞ ${startTime.format('DD.MM.YYYY HH:mm')}`);
        
        const response = await calendar.events.insert({
            calendarId: CALENDAR_ID,
            resource: event,
            sendUpdates: 'all' // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        });
        
        console.log(`‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: ${response.data.id}`);
        return { success: true, eventId: response.data.id, meetLink: response.data.hangoutLink };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error.message);
        // Fallback
        const slotKey = slotTime.format('YYYY-MM-DD_HH:mm');
        localSchedule[slotKey] = { lessonType, userInfo, createdAt: new Date() };
        return { success: true, eventId: slotKey };
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async function sendConfirmationEmail(bookingDetails) {
    if (!transporter) {
        console.log('‚ö†Ô∏è Email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: Nodemailer —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    const { email, lessonType, timeSlot, duration, price, meetLink, name } = bookingDetails;
    const selectedLesson = lessonTypes[lessonType];
    const slotTime = moment(timeSlot, 'YYYY-MM-DD_HH:mm').tz(TIMEZONE);

    const meetLinkHtml = meetLink ? `<p><b>–°—Å—ã–ª–∫–∞ –Ω–∞ Google Meet:</b> <a href="${meetLink}">${meetLink}</a></p>` : '';

    const mailOptions = {
        from: `"${TEACHER_EMAIL}" <${EMAIL_USER}>`,
        to: email,
        subject: `Potwierdzenie rezerwacji lekcji polskiego - ${selectedLesson.name}`,
        html: `
            <p>Witaj ${name},</p>
            <p>Dziƒôkujemy za rezerwacjƒô lekcji jƒôzyka polskiego!</p>
            <p>Oto szczeg√≥≈Çy Twojej rezerwacji:</p>
            <ul>
                <li><b>Typ lekcji:</b> ${selectedLesson.name}</li>
                <li><b>Data i czas:</b> ${slotTime.format('DD.MM.YYYY (dddd) HH:mm')}</li>
                <li><b>Czas trwania:</b> ${duration} minut</li>
                <li><b>Koszt:</b> ${price}</li>
            </ul>
            ${meetLinkHtml}
            <p>Link do Zoom zostanie przes≈Çany na Tw√≥j email na 24 godziny przed lekcjƒÖ.</p>
            <p>W razie pyta≈Ñ, prosimy o kontakt: ${TEACHER_EMAIL}</p>
            <p>Do zobaczenia na lekcji!</p>
            <p>Z powa≈ºaniem,<br>Anna Kowalska</p>
        `,
    };

    try {
        await transporter.sendMail(mailOptions);
        console.log(`‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ ${email}:`, error);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
async function checkCalendarStatus() {
    if (!calendar) {
        return '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
    }
    
    try {
        const response = await calendar.calendarList.list();
        const targetCalendar = response.data.items.find(cal => 
            cal.id === CALENDAR_ID || cal.id === 'primary'
        );
        
        if (targetCalendar) {
            return `–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω: ${targetCalendar.summary}`;
        } else {
            return `–ö–∞–ª–µ–Ω–¥–∞—Ä—å ${CALENDAR_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω`;
        }
    } catch (error) {
        return `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: ${error.message}`;
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è
function isValidEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
initializeGoogleCalendar();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userName = msg.from.first_name || msg.from.username;

    userSessions[userId] = {
        step: 'start',
        lessonType: null,
        timeSlot: null,
        email: null
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userProfiles[userId]) {
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        userSessions[userId].name = userProfiles[userId].name;
        userSessions[userId].email = userProfiles[userId].email;
        userSessions[userId].phone = userProfiles[userId].phone;
        await sendWelcomeMessage(chatId, userId, userProfiles[userId].name);
    } else {
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        userSessions[userId].step = 'waiting_name';
        bot.sendMessage(chatId, `
üáµüá± *Witaj ${userName}!*

Jestem Anna Kowalska, certyfikowany nauczyciel jƒôzyka polskiego! üë©‚Äçüè´

Zanim zaczniemy, proszƒô, podaj swoje imiƒô:`, { parse_mode: 'Markdown' });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
async function sendWelcomeMessage(chatId, userId, userName) {
    const calendarStatus = await checkCalendarStatus();
    console.log(`üìä –°—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${calendarStatus}`);

    const welcomeMessage = `
üáµüá± *Witaj ${userName}!*

Jestem Anna Kowalska, certyfikowany nauczyciel jƒôzyka polskiego! üë©‚Äçüè´

üìö *Oferujƒô profesjonalne lekcje online:*
‚Ä¢ Indywidualne podej≈õcie do ka≈ºdego ucznia
‚Ä¢ Materia≈Çy dostosowane do poziomu
‚Ä¢ Lekcje przez Zoom w wysokiej jako≈õci
‚Ä¢ Elastyczne godziny zajƒôƒá

üéØ *Moje specjalizacje:*
‚Ä¢ Przygotowanie do egzamin√≥w certyfikatowych
‚Ä¢ Polski dla biznesu i pracy
‚Ä¢ Konwersacje i wymowa
‚Ä¢ Gramatyka od podstaw

üí∞ *Ceny: 60-90 z≈Ç za lekcjƒô*
‚è∞ *Czas trwania: 60-90 minut*

üìÖ *Terminy synchronizowane z moim rzeczywistym kalendarzem*
üîÑ *Aktualne dostƒôpne godziny w czasie rzeczywistym*

Aby um√≥wiƒá lekcjƒô, kliknij przycisk poni≈ºej! üëá
`;

    const keyboard = {
        inline_keyboard: [
            [{ text: 'üìÖ Um√≥w lekcjƒô', callback_data: 'book_lesson' }],
            [{ text: 'üìã Moje rezerwacje', callback_data: 'my_bookings' }],
            [{ text: '‚ÑπÔ∏è Informacje', callback_data: 'info' }],
            [{ text: 'üìû Kontakt', callback_data: 'contact' }]
        ]
    };

    bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
    });
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
bot.onText(/\/debug/, async (msg) => {
    const chatId = msg.chat.id;
    
    const status = await checkCalendarStatus();
    const slots = await findAvailableSlots();
    
    const debugInfo = `
üîß *Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*

üìÖ –°—Ç–∞—Ç—É—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è: ${status}
üîç –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${slots.length}
‚öôÔ∏è –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: ${TEACHER_CONFIG.workingHours.start}-${TEACHER_CONFIG.workingHours.end}
üìÜ –†–∞–±–æ—á–∏–µ –¥–Ω–∏: ${TEACHER_CONFIG.workingDays.join(', ')}
‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞: ${TEACHER_CONFIG.lessonDuration} –º–∏–Ω
‚è≥ –ü–µ—Ä–µ—Ä—ã–≤: ${TEACHER_CONFIG.breakBetweenLessons} –º–∏–Ω

üïê –ë–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã:
${slots.slice(0, 5).map(slot => slot.text).join('\n')}
`;

    bot.sendMessage(chatId, debugInfo, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    if (!userSessions[userId]) {
        userSessions[userId] = {
            step: 'start',
            lessonType: null,
            timeSlot: null,
            email: null,
            phone: null
        };
    }

    bot.answerCallbackQuery(callbackQuery.id);

    if (data === 'book_lesson') {
        await showLessonTypes(chatId, messageId, userId);
    } else if (data.startsWith('lesson_')) {
        const lessonType = data.replace('lesson_', '');
        userSessions[userId].lessonType = lessonType;
        userSessions[userId].step = 'time_selection';
        await showTimeSlots(chatId, messageId, userId);
    } else if (data.startsWith('time_')) {
        const timeSlotId = data.replace('time_', '');
        userSessions[userId].timeSlot = timeSlotId;
        userSessions[userId].step = 'contact_info';
        await askForContactInfo(chatId, messageId, userId);
    } else if (data === 'confirm_booking') {
        await confirmBooking(chatId, messageId, userId);
    } else if (data === 'cancel_booking') {
        await cancelCurrentBooking(chatId, messageId, userId);
    } else if (data === 'my_bookings') {
        await showUserBookings(chatId, messageId, userId);
    } else if (data === 'info') {
        await showInfo(chatId, messageId);
    } else if (data === 'contact') {
        await showContact(chatId, messageId);
    } else if (data === 'back_to_main') {
        bot.editMessageText('Wybierz opcjƒô:', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìÖ Um√≥w lekcjƒô', callback_data: 'book_lesson' }],
                    [{ text: 'üìã Moje rezerwacje', callback_data: 'my_bookings' }],
                    [{ text: '‚ÑπÔ∏è Informacje', callback_data: 'info' }],
                    [{ text: 'üìû Kontakt', callback_data: 'contact' }]
                ]
            }
        });
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∏–ø—ã —É—Ä–æ–∫–æ–≤
async function showLessonTypes(chatId, messageId, userId) {
    const keyboard = [];
    
    Object.keys(lessonTypes).forEach(key => {
        keyboard.push([{
            text: lessonTypes[key].name,
            callback_data: `lesson_${key}`
        }]);
    });
    
    keyboard.push([{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'back_to_main' }]);

    const message = `
üìö *Wybierz rodzaj lekcji:*

${Object.keys(lessonTypes).map(key => {
    const lesson = lessonTypes[key];
    return `${lesson.name}\nüí∞ ${lesson.price} | ‚è∞ ${lesson.duration} min\n${lesson.description}\n`;
}).join('\n')}
`;

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
async function showTimeSlots(chatId, messageId, userId) {
    bot.editMessageText('üîÑ Sprawdzam m√≥j kalendarz...', {
        chat_id: chatId,
        message_id: messageId
    });
    
    const availableSlots = await findAvailableSlots();
    
    if (availableSlots.length === 0) {
        bot.editMessageText(
            `üòî Przepraszam, nie mam wolnych termin√≥w w najbli≈ºszych ${TEACHER_CONFIG.maxBookingDaysAhead} dniach.\n\nüìß Skontaktuj siƒô ze mnƒÖ bezpo≈õrednio: anna.kowalska@email.com\nüì± WhatsApp: +48 123 456 789`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'book_lesson' }]
                    ]
                }
            }
        );
        return;
    }

    const keyboard = [];
    
    for (let i = 0; i < availableSlots.length; i += 2) {
        const row = [availableSlots[i]];
        if (i + 1 < availableSlots.length) {
            row.push(availableSlots[i + 1]);
        }
        keyboard.push(row);
    }
    
    keyboard.push([{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'book_lesson' }]);

    const selectedLesson = lessonTypes[userSessions[userId].lessonType];
    const message = `
üìÖ *Dostƒôpne terminy dla: ${selectedLesson.name}*

üí∞ Cena: ${selectedLesson.price}
‚è∞ Czas trwania: ${selectedLesson.duration} minut

üîÑ *Terminy synchronizowane z moim rzeczywistym kalendarzem*
üìä Znaleziono ${availableSlots.length} wolnych termin√≥w:
`;

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    });
}

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
async function askForContactInfo(chatId, messageId, userId) {
    const session = userSessions[userId];
    const selectedLesson = lessonTypes[session.lessonType];
    const slotTime = moment(session.timeSlot, 'YYYY-MM-DD_HH:mm').tz(TIMEZONE);

    // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    if (userProfiles[userId] && userProfiles[userId].name && userProfiles[userId].email) {
        session.name = userProfiles[userId].name;
        session.email = userProfiles[userId].email;
        session.step = 'confirmation';
        showBookingConfirmation(chatId, userId);
        return;
    }

    const message = `
‚úÖ *Wybrano:*
üìö ${selectedLesson.name}
üìÖ ${slotTime.format('DD.MM.YYYY (dddd) HH:mm')}
üí∞ ${selectedLesson.price}
‚è∞ Czas trwania: ${selectedLesson.duration} minut

üìù *Proszƒô, podaj swoje imiƒô:*
`;

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è Zmie≈Ñ termin', callback_data: 'book_lesson' }]
            ]
        }
    });

    userSessions[userId].step = 'waiting_name_for_booking';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    if (text.startsWith('/')) return;
    if (!userSessions[userId]) return;

    const session = userSessions[userId];

    if (session.step === 'waiting_name') {
        session.name = text;
        userSessions[userId].step = 'waiting_email';
        bot.sendMessage(chatId, `
‚úÖ Imiƒô zapisane: ${text}

üìß *Teraz podaj sw√≥j email dla potwierdzenia:*
(Wy≈õlij wiadomo≈õƒá z adresem email)
`, { parse_mode: 'Markdown' });
    } else if (session.step === 'waiting_name_for_booking') {
        session.name = text;
        userSessions[userId].step = 'waiting_email';
        bot.sendMessage(chatId, `
‚úÖ Imiƒô zapisane: ${text}

üìß *Teraz podaj sw√≥j email dla potwierdzenia:*
(Wy≈õlij wiadomo≈õƒá z adresem email)
`, { parse_mode: 'Markdown' });
    } else if (session.step === 'waiting_email') {
        if (isValidEmail(text)) {
            session.email = text;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ userProfiles –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            userProfiles[userId] = {
                name: session.name,
                email: session.email
            };
            session.step = 'confirmation';
            showBookingConfirmation(chatId, userId);
        } else {
            bot.sendMessage(chatId, '‚ùå Podaj prawid≈Çowy adres email (np. nazwa@domena.pl)');
        }
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function showBookingConfirmation(chatId, userId) {
    const session = userSessions[userId];
    const selectedLesson = lessonTypes[session.lessonType];
    const slotTime = moment(session.timeSlot, 'YYYY-MM-DD_HH:mm').tz(TIMEZONE);

    const escapedName = escapeMarkdownV2(session.name || '');
    const escapedEmail = escapeMarkdownV2(session.email || '');
    const escapedPhone = escapeMarkdownV2(session.phone || '');

    const message = `
üìã *Potwierdzenie rezerwacji:*

üë§ \*\*Dane kontaktowe:\*\*
üìù Imiƒô: ${escapedName}
üìß Email: ${escapedEmail}

üìö \*\*Lekcja:\*\*
${escapeMarkdownV2(selectedLesson.name)}
${escapeMarkdownV2(selectedLesson.description)}

üìÖ \*\*Termin:\*\*
${escapeMarkdownV2(slotTime.format('DD.MM.YYYY (dddd)'))}
üïê ${escapeMarkdownV2(slotTime.format('HH:mm'))} - ${escapeMarkdownV2(slotTime.clone().add(selectedLesson.duration, 'minutes').format('HH:mm'))}
‚è∞ Czas trwania: ${escapeMarkdownV2(selectedLesson.duration.toString())} minut

üí∞ \*\*Koszt:\*\* ${escapeMarkdownV2(selectedLesson.price)}

üîó \*\*Link do Zoom zostanie przes≈Çany na email przed lekcjƒÖ\*\*
üìÖ \*\*Wydarzenie zostanie dodane do mojego kalendarza i Twojego\*\*
üìß \*\*Otrzymasz automatyczne przypomnienia\*\*

Czy potwierdzasz rezerwacjƒô?
`;

    const keyboard = {
        inline_keyboard: [
            [
                { text: '‚úÖ Potwierd≈∫', callback_data: 'confirm_booking' },
                { text: '‚ùå Anuluj', callback_data: 'cancel_booking' }
            ]
        ]
    };

    try {
        bot.sendMessage(chatId, message, {
            parse_mode: 'MarkdownV2',
            reply_markup: keyboard
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error.message);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
async function confirmBooking(chatId, messageId, userId) {
    const session = userSessions[userId];
    const selectedLesson = lessonTypes[session.lessonType];
    const slotTime = moment(session.timeSlot, 'YYYY-MM-DD_HH:mm').tz(TIMEZONE);
    
    bot.editMessageText('üîÑ Tworzƒô wydarzenie w kalendarzu...', {
        chat_id: chatId,
        message_id: messageId
    });
    
    try {
        const result = await createCalendarEvent(slotTime, session.lessonType, {
            userId: userId,
            email: session.email,
            name: session.email.split('@')[0]
        });
        
        if (result.success) {
            if (!bookings[userId]) {
                bookings[userId] = [];
            }
            
            bookings[userId].push({
                id: result.eventId,
                lessonType: session.lessonType,
                dateTime: session.timeSlot,
                email: session.email,
                bookedAt: new Date(),
                status: 'confirmed'
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await sendConfirmationEmail({
                email: session.email,
                lessonType: session.lessonType,
                timeSlot: session.timeSlot,
                duration: selectedLesson.duration,
                price: selectedLesson.price,
                meetLink: result.meetLink,
                name: session.name
            });

            const meetLinkText = result.meetLink ? `\nüîó **Link Google Meet:** ${result.meetLink}` : '';

            bot.editMessageText(`
üéâ *Rezerwacja potwierdzona!*

üìÖ **${slotTime.format('DD.MM.YYYY (dddd) HH:mm')}**
üìö **${selectedLesson.name}**
üí∞ **${selectedLesson.price}**

üìß **Szczeg√≥≈Çy wys≈Çane na:** ${session.email}
üìÖ **Dodano do kalendarza Google**
üîî **Automatyczne przypomnienia ustawione**${meetLinkText}

üìù **Co dalej:**
‚Ä¢ Za 24h przed lekcjƒÖ wy≈õlƒô link do Zoom
‚Ä¢ Przygotuj materia≈Çy do nauki
‚Ä¢ W razie pyta≈Ñ pisz: anna.kowalska@email.com

Do zobaczenia na lekcji! üáµüá±

üÜî **ID rezerwacji:** ${result.eventId.substring(0, 8)}
`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üè† Menu g≈Ç√≥wne', callback_data: 'back_to_main' }]
                    ]
                }
            });

            delete userSessions[userId];
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        bot.editMessageText('‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas tworzenia rezerwacji. Spr√≥buj ponownie lub skontaktuj siƒô bezpo≈õrednio.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ Spr√≥buj ponownie', callback_data: 'book_lesson' }],
                    [{ text: 'üè† Menu g≈Ç√≥wne', callback_data: 'back_to_main' }]
                ]
            }
        });
    }
}

// –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
async function cancelCurrentBooking(chatId, messageId, userId) {
    delete userSessions[userId];
    
    bot.editMessageText('‚ùå Rezerwacja anulowana.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üè† Menu g≈Ç√≥wne', callback_data: 'back_to_main' }]
            ]
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserBookings(chatId, messageId, userId) {
    const userBookingsList = bookings[userId] || [];
    
    if (userBookingsList.length === 0) {
        bot.editMessageText('üìù Nie masz ≈ºadnych rezerwacji.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìÖ Um√≥w lekcjƒô', callback_data: 'book_lesson' }],
                    [{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'back_to_main' }]
                ]
            }
        });
        return;
    }

    let message = 'üìã *Twoje rezerwacje:*\n\n';
    
    userBookingsList.forEach((booking, index) => {
        const lesson = lessonTypes[booking.lessonType];
        const bookingTime = moment(booking.dateTime, 'YYYY-MM-DD_HH:mm').tz(TIMEZONE);
        
        message += `${index + 1}. **${bookingTime.format('DD.MM.YYYY (dddd) HH:mm')}**\n`;
        message += `üìö ${lesson.name}
`;
        message += `üí∞ ${lesson.price}
`;
        message += `üìß ${booking.email}
`;
        message += `üÜî ID: ${booking.id.substring(0, 8)}

`;
    });

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üìÖ Um√≥w nowƒÖ lekcjƒô', callback_data: 'book_lesson' }],
                [{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'back_to_main' }]
            ]
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
async function showInfo(chatId, messageId) {
    const calendarStatus = calendar ? '‚úÖ Synchronizacja z kalendarzem Google' : '‚ö†Ô∏è Lokalne zarzƒÖdzanie terminami';
    
    const message = `
‚ÑπÔ∏è **Informacje o lekcjach:**

üë©‚Äçüè´ **Anna Kowalska**
‚Ä¢ Certyfikowany nauczyciel jƒôzyka polskiego
‚Ä¢ 8 lat do≈õwiadczenia w nauczaniu online
‚Ä¢ Specjalizacja: egzaminy, biznes, konwersacje

üìö **Poziomy nauczania:**
‚Ä¢ A1-A2 (PoczƒÖtkujƒÖcy)
‚Ä¢ B1-B2 (≈öredniozaawansowany) 
‚Ä¢ C1-C2 (Zaawansowany)

üéØ **Metody nauczania:**
‚Ä¢ Komunikatywna metoda nauki
‚Ä¢ Materia≈Çy multimedialne
‚Ä¢ ƒÜwiczenia praktyczne
‚Ä¢ Symulacje sytuacji rzeczywistych

‚è∞ **Godziny pracy:**
Pon-Sob: ${TEACHER_CONFIG.workingHours.start}:00-${TEACHER_CONFIG.workingHours.end}:00

üîó **Platforma:** Zoom
üì± **Wsparcie:** WhatsApp, Email
üìÖ **System:** ${calendarStatus}
üîÑ **Automatyczne przypomnienia**
`;

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'back_to_main' }]
            ]
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
async function showContact(chatId, messageId) {
    const message = `
üìû **Kontakt:**

üë©‚Äçüè´ **Anna Kowalska**
üìß Email: anna.kowalska@email.com
üì± WhatsApp: +48 123 456 789
üåê Website: www.polskionline.pl

üìç **Adres (lekcje stacjonarne):**
ul. Nowy ≈öwiat 15/3
00-497 Warszawa

‚è∞ **Godziny kontaktu:**
Pon-Pt: 8:00-21:00
Sob: 9:00-18:00
Niedz: 10:00-16:00

üí¨ **Jƒôzyki obs≈Çugi:**
üáµüá± Polski
üá¨üáß English  
üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
üá∑üá∫ –†—É—Å—Å–∫–∏–π

üìÖ **Automatyczne zarzƒÖdzanie kalendarzem**
üîÑ **Synchronizacja z Google Calendar w czasie rzeczywistym**
üìß **Automatyczne e-mail powiadomienia**
`;

    bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è Powr√≥t', callback_data: 'back_to_main' }]
            ]
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.log('Polling error:', error);
});

bot.on('error', (error) => {
    console.log('Bot error:', error);
});

console.log('üáµüá± Polish Teacher Bot (Calendar Integration) –∑–∞–ø—É—â–µ–Ω...');
console.log('üìÖ Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:', calendar ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)');
console.log(`üïê –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: ${TEACHER_CONFIG.workingHours.start}:00-${TEACHER_CONFIG.workingHours.end}:00`);
console.log(`üìÜ –†–∞–±–æ—á–∏–µ –¥–Ω–∏: ${TEACHER_CONFIG.workingDays.join(', ')} (1=–ü–Ω, 6=–°–±)`);
console.log(`‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞: ${TEACHER_CONFIG.lessonDuration} –º–∏–Ω, –ø–µ—Ä–µ—Ä—ã–≤: ${TEACHER_CONFIG.breakBetweenLessons} –º–∏–Ω`);
